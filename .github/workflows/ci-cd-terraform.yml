name: Infra Provision

on:
  pull_request:
    types:
      - closed
    branches:
      - main
    paths:
      - 'terraform/**'

jobs:
  terraform:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    name: Terraform workflow
    defaults:
      run:
        working-directory: terraform
    env:
      TF_VAR_kestra_user: ${{ secrets.KESTRA_USER }}
      TF_VAR_kestra_password: ${{ secrets.KESTRA_PASSWORD }}
      TF_VAR_postgres_db: ${{ secrets.POSTGRES_DB }}
      TF_VAR_postgres_user: ${{ secrets.POSTGRES_USER }}
      TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
      TF_VAR_secret_cliente_id: ${{ secrets.SECRET_CLIENTE_ID_BASE64 }}
      TF_VAR_secret_cliente_secret: ${{ secrets.SECRET_CLIENTE_SECRET_BASE64 }}
      TF_VAR_secret_project_id: ${{ secrets.SECRET_PROJECT_ID_BASE64 }}
      TF_VAR_secret_gcp_credentials: ${{ secrets.SECRET_GCP_CREDENTIALS_BASE64 }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS_JSON }}'

      - name: Verify gcloud auth
        run: gcloud auth list

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Get Kestra instance IP
        run: |
          IP=$(gcloud compute instances describe kestra-instance \
            --zone=us-east1-b \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "KESRA_INSTANCE_IP=$IP" >> "$GITHUB_ENV"

      - name: Run init-prod-kv flow via Kestra API
        run: |
          echo "Esperando a que Kestra esté saludable..."
          for i in {1..100}; do
            if curl -s -u "${{ secrets.KESTRA_USER }}:${{ secrets.KESTRA_PASSWORD }}" http://$KESRA_INSTANCE_IP:8081/health | grep '"status":"UP"' > /dev/null; then
              echo "Kestra está listo."
              break
            else
              echo "Esperando 20 segundos..."
              sleep 20
            fi
          done

          echo "Verificando si el flujo init-prod-kv existe..."
          status_code=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.KESTRA_USER }}:${{ secrets.KESTRA_PASSWORD }}" \
            http://$KESRA_INSTANCE_IP:8080/api/v1/flows/spotify-dwh-insights.prod/init-prod-kv)

          if [ "$status_code" -eq 200 ]; then
            echo "Flujo encontrado. Ejecutando init-prod-kv..."
            curl -v -X POST "http://$KESRA_INSTANCE_IP:8080/api/v1/executions/spotify-dwh-insights.prod/init-prod-kv" \
              -u "${{ secrets.KESTRA_USER }}:${{ secrets.KESTRA_PASSWORD }}" \
              -H "Content-Type: multipart/form-data"
          else
            echo "Flujo init-prod-kv no encontrado. Saltando ejecución."
          fi
      
